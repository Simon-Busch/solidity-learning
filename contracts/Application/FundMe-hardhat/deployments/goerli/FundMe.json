{
  "address": "0x72eac50bf521198FC481FEe925B0022B6b8b765e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xed68d9193e93d5bc42ccfc9a8221ef76e56f933cba35f4870b13c8569283b691",
  "receipt": {
    "to": null,
    "from": "0xD06e66968c1a684269a19005A61599070eEd072E",
    "contractAddress": "0x72eac50bf521198FC481FEe925B0022B6b8b765e",
    "transactionIndex": 9,
    "gasUsed": "852071",
    "logsBloom": "0x
    "blockHash": "0xa314db171b01e050303ce3da335efee4491f3566b99427939d244ee81f221190",
    "transactionHash": "0xed68d9193e93d5bc42ccfc9a8221ef76e56f933cba35f4870b13c8569283b691",
    "logs": [],
    "blockNumber": 7458509,
    "cumulativeGasUsed": "6762073",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "a78a6865a32872b3d0859e00000f659e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n// at the time of writing, goerli network to be selected\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // 1 * 10 ** 18\\n    //using constant for var that are set only 1 time make it more gas efficient\\n    // initial deploy 831,183\\n    // using constant 811,025\\n    address public immutable i_owner; // convention to name immutable var like this\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == i_owner, \\\"you are not the owner\\\");\\n        // string consume more gas. Custom error use less\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    function fund() public payable {\\n        // 1.How to send ETH to this contract ?\\n        // require(getConversionRate(msg.value) >= minimumUsd, \\\"Didn't send enough ETH\\\");\\n        // 1eth = 1e18 = 1 * 10 ** 18 == 1000000000000000000\\n        // could be msg.value >= 1e18\\n\\n        // msg.value.getConversionRate() === getConversionRate(msg.value)\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"Didn't send enough ETH\\\");\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() payable public onlyOwner {\\n        for(uint256 funderIndex = 0; funderIndex < funders.length ; funderIndex ++) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // send\\n\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n\\n        // call\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    //important to handle the case if someone trigger a function that doesn't exist or just send eth to the contract\\n    // otherwise we get eth in the balance but no record of funder\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x4a16189f2e432ac72cf6b347e0d539593015bd6280167dab84d72f0007f561f2\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// to get rid of this : yarn add --dev @chainlink/contracts\\n\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n         // ETH in terms of USD\\n        //returns 3000.00000000 ( 8 decimals ) we need 18 decimals\\n        return uint256(price * 1e10); // 1**10\\n    }\\n\\n\\n    function getVersion() internal view returns (uint256){\\n      // get the address of the right contract here  :https://docs.chain.link/docs/ethereum-addresses/\\n      AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n      return priceFeed.version();\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; // 1e18\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x4b0cc020cb465927061874f0b9baa3b6bb7e69910cbd9df7e06c4cd37e119dfd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f6c380380610f6c83398181016040528101906100329190610112565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100df826100b4565b9050919050565b6100ef816100d4565b81146100fa57600080fd5b50565b60008151905061010c816100e6565b92915050565b600060208284031215610128576101276100af565b5b6000610136848285016100fd565b91505092915050565b60805160601c610e08610164600039600081816102c5015261054f0152610e086000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a146100ff578063b60d42881461012a578063dba6335f14610134578063dc0d3dff1461015f57610083565b80633ccfd60b1461008d5780633e47d6f3146100975780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b6100956102c3565b005b3480156100a357600080fd5b506100be60048036038101906100b99190610796565b610504565b6040516100cb91906107dc565b60405180910390f35b3480156100e057600080fd5b506100e961051c565b6040516100f691906107dc565b60405180910390f35b34801561010b57600080fd5b50610114610529565b6040516101219190610856565b60405180910390f35b61013261019c565b005b34801561014057600080fd5b5061014961054d565b6040516101569190610880565b60405180910390f35b34801561016b57600080fd5b50610186600480360381019061018191906108c7565b610571565b6040516101939190610880565b60405180910390f35b6802b5e3af16b18800006101d960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b090919063ffffffff16565b101561021a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021190610951565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610348576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103f45760006001828154811061036e5761036d610971565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103ec906109cf565b91505061034b565b50600067ffffffffffffffff8111156104105761040f610a18565b5b60405190808252806020026020018201604052801561043e5781602001602082028036833780820191505090505b506001908051906020019061045492919061068c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047b90610a78565b60006040518083038185875af1925050503d80600081146104b8576040519150601f19603f3d011682016040523d82523d6000602084013e6104bd565b606091505b5050905080610501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f890610ad9565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b6802b5e3af16b188000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061058157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105bc836105ec565b90506000670de0b6b3a764000085836105d59190610af9565b6105df9190610b82565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610c40565b5050509150506402540be400816106849190610cbb565b915050919050565b828054828255906000526020600020908101928215610705579160200282015b828111156107045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ac565b5b5090506107129190610716565b5090565b5b8082111561072f576000816000905550600101610717565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076382610738565b9050919050565b61077381610758565b811461077e57600080fd5b50565b6000813590506107908161076a565b92915050565b6000602082840312156107ac576107ab610733565b5b60006107ba84828501610781565b91505092915050565b6000819050919050565b6107d6816107c3565b82525050565b60006020820190506107f160008301846107cd565b92915050565b6000819050919050565b600061081c61081761081284610738565b6107f7565b610738565b9050919050565b600061082e82610801565b9050919050565b600061084082610823565b9050919050565b61085081610835565b82525050565b600060208201905061086b6000830184610847565b92915050565b61087a81610758565b82525050565b60006020820190506108956000830184610871565b92915050565b6108a4816107c3565b81146108af57600080fd5b50565b6000813590506108c18161089b565b92915050565b6000602082840312156108dd576108dc610733565b5b60006108eb848285016108b2565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b600061093b6016836108f4565b915061094682610905565b602082019050919050565b6000602082019050818103600083015261096a8161092e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109da826107c3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a0d57610a0c6109a0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a62600083610a47565b9150610a6d82610a52565b600082019050919050565b6000610a8382610a55565b9150819050919050565b7f6661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000610ac36012836108f4565b9150610ace82610a8d565b602082019050919050565b60006020820190508181036000830152610af281610ab6565b9050919050565b6000610b04826107c3565b9150610b0f836107c3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4857610b476109a0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b8d826107c3565b9150610b98836107c3565b925082610ba857610ba7610b53565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bd281610bb3565b8114610bdd57600080fd5b50565b600081519050610bef81610bc9565b92915050565b6000819050919050565b610c0881610bf5565b8114610c1357600080fd5b50565b600081519050610c2581610bff565b92915050565b600081519050610c3a8161089b565b92915050565b600080600080600060a08688031215610c5c57610c5b610733565b5b6000610c6a88828901610be0565b9550506020610c7b88828901610c16565b9450506040610c8c88828901610c2b565b9350506060610c9d88828901610c2b565b9250506080610cae88828901610be0565b9150509295509295909350565b6000610cc682610bf5565b9150610cd183610bf5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1057610d0f6109a0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d4d57610d4c6109a0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d8a57610d896109a0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dc757610dc66109a0565b5b82820290509291505056fea2646970667358221220ca97cece1bf2adec2bf3a56bddd91e9060a1aa7c9dcf87a93af112a10126ec2664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a146100ff578063b60d42881461012a578063dba6335f14610134578063dc0d3dff1461015f57610083565b80633ccfd60b1461008d5780633e47d6f3146100975780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b6100956102c3565b005b3480156100a357600080fd5b506100be60048036038101906100b99190610796565b610504565b6040516100cb91906107dc565b60405180910390f35b3480156100e057600080fd5b506100e961051c565b6040516100f691906107dc565b60405180910390f35b34801561010b57600080fd5b50610114610529565b6040516101219190610856565b60405180910390f35b61013261019c565b005b34801561014057600080fd5b5061014961054d565b6040516101569190610880565b60405180910390f35b34801561016b57600080fd5b50610186600480360381019061018191906108c7565b610571565b6040516101939190610880565b60405180910390f35b6802b5e3af16b18800006101d960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b090919063ffffffff16565b101561021a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021190610951565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610348576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103f45760006001828154811061036e5761036d610971565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103ec906109cf565b91505061034b565b50600067ffffffffffffffff8111156104105761040f610a18565b5b60405190808252806020026020018201604052801561043e5781602001602082028036833780820191505090505b506001908051906020019061045492919061068c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047b90610a78565b60006040518083038185875af1925050503d80600081146104b8576040519150601f19603f3d011682016040523d82523d6000602084013e6104bd565b606091505b5050905080610501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f890610ad9565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b6802b5e3af16b188000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061058157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105bc836105ec565b90506000670de0b6b3a764000085836105d59190610af9565b6105df9190610b82565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610c40565b5050509150506402540be400816106849190610cbb565b915050919050565b828054828255906000526020600020908101928215610705579160200282015b828111156107045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ac565b5b5090506107129190610716565b5090565b5b8082111561072f576000816000905550600101610717565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076382610738565b9050919050565b61077381610758565b811461077e57600080fd5b50565b6000813590506107908161076a565b92915050565b6000602082840312156107ac576107ab610733565b5b60006107ba84828501610781565b91505092915050565b6000819050919050565b6107d6816107c3565b82525050565b60006020820190506107f160008301846107cd565b92915050565b6000819050919050565b600061081c61081761081284610738565b6107f7565b610738565b9050919050565b600061082e82610801565b9050919050565b600061084082610823565b9050919050565b61085081610835565b82525050565b600060208201905061086b6000830184610847565b92915050565b61087a81610758565b82525050565b60006020820190506108956000830184610871565b92915050565b6108a4816107c3565b81146108af57600080fd5b50565b6000813590506108c18161089b565b92915050565b6000602082840312156108dd576108dc610733565b5b60006108eb848285016108b2565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b600061093b6016836108f4565b915061094682610905565b602082019050919050565b6000602082019050818103600083015261096a8161092e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109da826107c3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a0d57610a0c6109a0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a62600083610a47565b9150610a6d82610a52565b600082019050919050565b6000610a8382610a55565b9150819050919050565b7f6661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000610ac36012836108f4565b9150610ace82610a8d565b602082019050919050565b60006020820190508181036000830152610af281610ab6565b9050919050565b6000610b04826107c3565b9150610b0f836107c3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4857610b476109a0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b8d826107c3565b9150610b98836107c3565b925082610ba857610ba7610b53565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bd281610bb3565b8114610bdd57600080fd5b50565b600081519050610bef81610bc9565b92915050565b6000819050919050565b610c0881610bf5565b8114610c1357600080fd5b50565b600081519050610c2581610bff565b92915050565b600081519050610c3a8161089b565b92915050565b600080600080600060a08688031215610c5c57610c5b610733565b5b6000610c6a88828901610be0565b9550506020610c7b88828901610c16565b9450506040610c8c88828901610c2b565b9350506060610c9d88828901610c2b565b9250506080610cae88828901610be0565b9150509295509295909350565b6000610cc682610bf5565b9150610cd183610bf5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1057610d0f6109a0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d4d57610d4c6109a0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d8a57610d896109a0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dc757610dc66109a0565b5b82820290509291505056fea2646970667358221220ca97cece1bf2adec2bf3a56bddd91e9060a1aa7c9dcf87a93af112a10126ec2664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 95,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}