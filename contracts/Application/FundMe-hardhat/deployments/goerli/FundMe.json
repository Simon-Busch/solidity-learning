{
  "address": "0x3690F4cF53754560FA4d817180F95982ae78475A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x90f5db68a4ef835f4940fbe2fa31b3aec51fd7e97d321dcff5f1033383c9c140",
  "receipt": {
    "to": null,
    "from": "0xD06e66968c1a684269a19005A61599070eEd072E",
    "contractAddress": "0x3690F4cF53754560FA4d817180F95982ae78475A",
    "transactionIndex": 21,
    "gasUsed": "1016222",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3cd72c7fa2989d82f6ef13ccc1b997d03d59eb6f7b88cb0c8513a1612ddc9825",
    "transactionHash": "0x90f5db68a4ef835f4940fbe2fa31b3aec51fd7e97d321dcff5f1033383c9c140",
    "logs": [],
    "blockNumber": 7463550,
    "cumulativeGasUsed": "8032410",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "54c726d94cbf9b0a2a2cf33f712f7085",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"a contract for crowd function\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"this function funds the contract\"}},\"notice\":\"This contract is do demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n// at the time of writing, goerli network to be selected\\n\\nerror FundMe__NotOwner();\\n\\n// convention : contractName__ERROR\\n\\n///@title a contract for crowd function\\n///@author Patrick Collins\\n///@notice This contract is do demo a sample funding contract\\n///@dev This implements price feeds as our library\\n//nb: https://docs.soliditylang.org/en/v0.8.16/style-guide.html#order-of-layout\\n\\ncontract FundMe {\\n    // type declaration\\n    using PriceConverter for uint256;\\n\\n    //State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // 1 * 10 ** 18\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address private immutable i_owner; // convention to name immutable var like this\\n    address[] private s_funders;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    ///@notice this function funds the contract\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough ETH\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x9a4998bdbaffd6a2aba1119254628aa1a9fe36d035f90722134a68d21e589906\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// to get rid of this : yarn add --dev @chainlink/contracts\\n\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        // ETH in terms of USD\\n        //returns 3000.00000000 ( 8 decimals ) we need 18 decimals\\n        return uint256(price * 1e10); // 1**10\\n    }\\n\\n    function getVersion() internal view returns (uint256) {\\n        // get the address of the right contract here  :https://docs.chain.link/docs/ethereum-addresses/\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; // 1e18\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xe10f1b121a4a34197414a7208c6e10b40b57ea2ee1462e01e70c6bcd8ca3f74d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200128338038062001283833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111046200017f600039600081816103230152818161057201526105c201526111046000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a92565b6102d9565b6040516100cc9190610ad8565b60405180910390f35b6100dd610321565b005b3480156100eb57600080fd5b506100f4610561565b6040516101019190610ad8565b60405180910390f35b34801561011657600080fd5b5061011f61056e565b60405161012c9190610b02565b60405180910390f35b34801561014157600080fd5b5061014a610596565b6040516101579190610b7c565b60405180910390f35b6101686101b1565b005b6101726105c0565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bc3565b610864565b6040516101a89190610b02565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ac90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c4d565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610451576000600182815481106103cc576103cb610c6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044990610ccb565b9150506103a9565b50600067ffffffffffffffff81111561046d5761046c610d14565b5b60405190808252806020026020018201604052801561049b5781602001602082028036833780820191505090505b50600190805190602001906104b1929190610988565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d890610d74565b60006040518083038185875af1925050503d8060008114610515576040519150601f19603f3d011682016040523d82523d6000602084013e61051a565b606091505b505090508061055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610dd5565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067f575b5050505050905060005b81518110156107535760008282815181106106f1576106f0610c6d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610ccb565b9150506106d3565b50600067ffffffffffffffff81111561076f5761076e610d14565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600190805190602001906107b3929190610988565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107da90610d74565b60006040518083038185875af1925050503d8060008114610817576040519150601f19603f3d011682016040523d82523d6000602084013e61081c565b606091505b5050905080610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790610dd5565b60405180910390fd5b5050565b60006001828154811061087a57610879610c6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108b8836108e8565b90506000670de0b6b3a764000085836108d19190610df5565b6108db9190610e7e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190610f3c565b5050509150506402540be400816109809190610fb7565b915050919050565b828054828255906000526020600020908101928215610a01579160200282015b82811115610a005782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109a8565b5b509050610a0e9190610a12565b5090565b5b80821115610a2b576000816000905550600101610a13565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5f82610a34565b9050919050565b610a6f81610a54565b8114610a7a57600080fd5b50565b600081359050610a8c81610a66565b92915050565b600060208284031215610aa857610aa7610a2f565b5b6000610ab684828501610a7d565b91505092915050565b6000819050919050565b610ad281610abf565b82525050565b6000602082019050610aed6000830184610ac9565b92915050565b610afc81610a54565b82525050565b6000602082019050610b176000830184610af3565b92915050565b6000819050919050565b6000610b42610b3d610b3884610a34565b610b1d565b610a34565b9050919050565b6000610b5482610b27565b9050919050565b6000610b6682610b49565b9050919050565b610b7681610b5b565b82525050565b6000602082019050610b916000830184610b6d565b92915050565b610ba081610abf565b8114610bab57600080fd5b50565b600081359050610bbd81610b97565b92915050565b600060208284031215610bd957610bd8610a2f565b5b6000610be784828501610bae565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b6000610c37601683610bf0565b9150610c4282610c01565b602082019050919050565b60006020820190508181036000830152610c6681610c2a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cd682610abf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0957610d08610c9c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d5e600083610d43565b9150610d6982610d4e565b600082019050919050565b6000610d7f82610d51565b9150819050919050565b7f6661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000610dbf601283610bf0565b9150610dca82610d89565b602082019050919050565b60006020820190508181036000830152610dee81610db2565b9050919050565b6000610e0082610abf565b9150610e0b83610abf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4457610e43610c9c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8982610abf565b9150610e9483610abf565b925082610ea457610ea3610e4f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ece81610eaf565b8114610ed957600080fd5b50565b600081519050610eeb81610ec5565b92915050565b6000819050919050565b610f0481610ef1565b8114610f0f57600080fd5b50565b600081519050610f2181610efb565b92915050565b600081519050610f3681610b97565b92915050565b600080600080600060a08688031215610f5857610f57610a2f565b5b6000610f6688828901610edc565b9550506020610f7788828901610f12565b9450506040610f8888828901610f27565b9350506060610f9988828901610f27565b9250506080610faa88828901610edc565b9150509295509295909350565b6000610fc282610ef1565b9150610fcd83610ef1565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100c5761100b610c9c565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561104957611048610c9c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108657611085610c9c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110c3576110c2610c9c565b5b82820290509291505056fea2646970667358221220d7026a93fb5a460cecbef9fd5549df8b43adfa901f8e1df26bb71c216ebaecc464736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a92565b6102d9565b6040516100cc9190610ad8565b60405180910390f35b6100dd610321565b005b3480156100eb57600080fd5b506100f4610561565b6040516101019190610ad8565b60405180910390f35b34801561011657600080fd5b5061011f61056e565b60405161012c9190610b02565b60405180910390f35b34801561014157600080fd5b5061014a610596565b6040516101579190610b7c565b60405180910390f35b6101686101b1565b005b6101726105c0565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bc3565b610864565b6040516101a89190610b02565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ac90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c4d565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610451576000600182815481106103cc576103cb610c6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044990610ccb565b9150506103a9565b50600067ffffffffffffffff81111561046d5761046c610d14565b5b60405190808252806020026020018201604052801561049b5781602001602082028036833780820191505090505b50600190805190602001906104b1929190610988565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d890610d74565b60006040518083038185875af1925050503d8060008114610515576040519150601f19603f3d011682016040523d82523d6000602084013e61051a565b606091505b505090508061055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610dd5565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067f575b5050505050905060005b81518110156107535760008282815181106106f1576106f0610c6d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610ccb565b9150506106d3565b50600067ffffffffffffffff81111561076f5761076e610d14565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600190805190602001906107b3929190610988565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107da90610d74565b60006040518083038185875af1925050503d8060008114610817576040519150601f19603f3d011682016040523d82523d6000602084013e61081c565b606091505b5050905080610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790610dd5565b60405180910390fd5b5050565b60006001828154811061087a57610879610c6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108b8836108e8565b90506000670de0b6b3a764000085836108d19190610df5565b6108db9190610e7e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190610f3c565b5050509150506402540be400816109809190610fb7565b915050919050565b828054828255906000526020600020908101928215610a01579160200282015b82811115610a005782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109a8565b5b509050610a0e9190610a12565b5090565b5b80821115610a2b576000816000905550600101610a13565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5f82610a34565b9050919050565b610a6f81610a54565b8114610a7a57600080fd5b50565b600081359050610a8c81610a66565b92915050565b600060208284031215610aa857610aa7610a2f565b5b6000610ab684828501610a7d565b91505092915050565b6000819050919050565b610ad281610abf565b82525050565b6000602082019050610aed6000830184610ac9565b92915050565b610afc81610a54565b82525050565b6000602082019050610b176000830184610af3565b92915050565b6000819050919050565b6000610b42610b3d610b3884610a34565b610b1d565b610a34565b9050919050565b6000610b5482610b27565b9050919050565b6000610b6682610b49565b9050919050565b610b7681610b5b565b82525050565b6000602082019050610b916000830184610b6d565b92915050565b610ba081610abf565b8114610bab57600080fd5b50565b600081359050610bbd81610b97565b92915050565b600060208284031215610bd957610bd8610a2f565b5b6000610be784828501610bae565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b6000610c37601683610bf0565b9150610c4282610c01565b602082019050919050565b60006020820190508181036000830152610c6681610c2a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cd682610abf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0957610d08610c9c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d5e600083610d43565b9150610d6982610d4e565b600082019050919050565b6000610d7f82610d51565b9150819050919050565b7f6661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000610dbf601283610bf0565b9150610dca82610d89565b602082019050919050565b60006020820190508181036000830152610dee81610db2565b9050919050565b6000610e0082610abf565b9150610e0b83610abf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4457610e43610c9c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8982610abf565b9150610e9483610abf565b925082610ea457610ea3610e4f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ece81610eaf565b8114610ed957600080fd5b50565b600081519050610eeb81610ec5565b92915050565b6000819050919050565b610f0481610ef1565b8114610f0f57600080fd5b50565b600081519050610f2181610efb565b92915050565b600081519050610f3681610b97565b92915050565b600080600080600060a08688031215610f5857610f57610a2f565b5b6000610f6688828901610edc565b9550506020610f7788828901610f12565b9450506040610f8888828901610f27565b9350506060610f9988828901610f27565b9250506080610faa88828901610edc565b9150509295509295909350565b6000610fc282610ef1565b9150610fcd83610ef1565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100c5761100b610c9c565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561104957611048610c9c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108657611085610c9c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110c3576110c2610c9c565b5b82820290509291505056fea2646970667358221220d7026a93fb5a460cecbef9fd5549df8b43adfa901f8e1df26bb71c216ebaecc464736f6c63430008080033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "a contract for crowd function",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "this function funds the contract"
      }
    },
    "notice": "This contract is do demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}