// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

contract AbiDecode {
  struct MyStruct{
    string name;
    uint[2] nums;
  }

  // ex data
  // 1
  // 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
  // [3,4,5]
  // ["Solidity", [2,8]]
  // uint [] input from external call - calldata

  function encode(uint x, address addr, uint[] calldata arr, MyStruct calldata myStruct ) external pure returns (bytes memory) {
    return abi.encode(x, addr, arr, myStruct);
  }
  // return 
  // 0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddcf6c6964697479000000000000000000000000000000000000000000000000
  

  // uint []  decoded data was created in memory of EVM
  function decode(bytes calldata data) external pure returns (uint x, address addr, uint[] memory arr, MyStruct memory myStruct) {
    // data to decode, list of data type
    (x, addr, arr, myStruct) = abi.decode(data, (uint,address, uint[], MyStruct));
  }
}
